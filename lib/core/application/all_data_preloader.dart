// lib/core/application/all_data_preloader.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:flutter/painting.dart';
import '../domain/models/shared/experience_item.dart';
import '../domain/models/shared/city_model.dart';
import '../../features/city_page/application/providers/city_experiences_controller.dart';
import '../../features/search/application/state/city_selection_state.dart';
import '../../features/categories/application/state/categories_provider.dart';
import '../../features/categories/application/state/subcategories_provider.dart';
import '../../features/search/application/state/activity_providers.dart';
import '../../features/search/application/state/event_providers.dart';

part 'all_data_preloader.g.dart';

/// IDs de sections constants pour √©viter les magic strings
class SectionIds {
  static const String featured = 'a62c6046-8814-456f-91ba-b65aa7e73137';
  static const String subcategory = '5aa09feb-397a-4ad1-8142-7dcf0b2edd0f';
  static const String cityEventsSection = '7f94df23-ab30-4bf3-afb2-59320e5466a7';
  static const String cityActivitiesSection = '5aa09feb-397a-4ad1-8142-7dcf0b2edd0f';
}

@riverpod
class AllDataPreloader extends _$AllDataPreloader {
  bool _isLoading = false;
  bool get isLoading => _isLoading;

  @override
  Map<String, List<ExperienceItem>> build() => {};

  /// One Shot Loading COMPLET avec protection contre double d√©clenchement
  Future<void> loadCompleteCity(String cityId) async {
    // ‚úÖ Protection contre double d√©clenchement
    if (_isLoading) {
      print('‚ö†Ô∏è PRELOAD: D√©j√† en cours, ignor√©');
      return;
    }

    _isLoading = true;
    // ‚úÖ Purge m√©moire avant nouveau chargement
    _clearMemoryCache();
    state = {}; // reset pr√©c√©dent
    print('üöÄ PRELOAD ONE SHOT COMPLET: D√©marrage pour $cityId');

    try {
      final city = ref.read(selectedCityProvider);
      if (city == null) throw Exception('Aucune ville s√©lectionn√©e');

      // ‚úÖ CHARGEMENT PARALL√àLE : CityPage + toutes les cat√©gories
      final results = await Future.wait([
        _loadCityPageData(cityId),
        _loadAllCategoriesData(city),
      ], eagerError: false);

      // ‚úÖ FUSION des donn√©es
      final Map<String, List<ExperienceItem>> allData = {};
      allData.addAll(results[0] ?? {});
      allData.addAll(results[1] ?? {});

      state = allData;
      print('‚úÖ PRELOAD ONE SHOT COMPLET: ${allData.length} carousels charg√©s');

    } catch (e) {
      print('‚ùå PRELOAD ONE SHOT COMPLET: Erreur $e');
      state = {};
    } finally {
      _isLoading = false;
    }
  }

  void _clearMemoryCache() {
    try {
      PaintingBinding.instance.imageCache.clear();
      print('üßπ PRELOAD: Cache m√©moire purg√©');
    } catch (e) {
      print('‚ö†Ô∏è PRELOAD: Erreur purge cache: $e');
    }
  }

  Future<Map<String, List<ExperienceItem>>?> _loadCityPageData(String cityId) async {
    try {
      final cityExperiences = await ref.read(cityExperiencesControllerProvider(cityId).future);
      final Map<String, List<ExperienceItem>> cityData = {};

      for (final categoryExp in cityExperiences) {
        for (final sectionExp in categoryExp.sections) {
          // ‚úÖ Cl√© normalis√©e : categoryId_sectionId
          final key = '${categoryExp.category.id}_${sectionExp.section.id}';
          cityData[key] = sectionExp.experiences;
        }
      }

      print('‚úÖ CityPage: ${cityData.length} carousels charg√©s');
      return cityData;

    } catch (e) {
      print('‚ùå CityPage: Erreur $e');
      return {};
    }
  }

  Future<Map<String, List<ExperienceItem>>?> _loadAllCategoriesData(City city) async {
    try {
      // ‚úÖ R√©cup√©rer toutes les cat√©gories disponibles
      final categories = await ref.read(categoriesProvider.future);
      final Map<String, List<ExperienceItem>> categoriesData = {};

      // ‚úÖ CHARGEMENT PARALL√àLE : Featured pour chaque cat√©gorie
      final categoryResults = await Future.wait(
        categories.map((category) => _loadSingleCategoryData(city, category.id)),
        eagerError: false,
      );

      // ‚úÖ FUSION des r√©sultats de chaque cat√©gorie
      for (int i = 0; i < categories.length; i++) {
        final categoryData = categoryResults[i];
        if (categoryData != null) {
          categoriesData.addAll(categoryData);
        }
      }

      print('‚úÖ Cat√©gories: ${categoriesData.length} carousels charg√©s pour ${categories.length} cat√©gories');
      return categoriesData;

    } catch (e) {
      print('‚ùå Cat√©gories: Erreur globale $e');
      return {};
    }
  }

  Future<Map<String, List<ExperienceItem>>?> _loadSingleCategoryData(City city, String categoryId) async {
    try {
      final Map<String, List<ExperienceItem>> categoryData = {};

      // ‚úÖ 1. Charger Featured avec cl√© normalis√©e
      final featuredData = await _loadCategoryFeatured(city, categoryId);
      if (featuredData.isNotEmpty) {
        final featuredKey = '${categoryId}_${SectionIds.featured}';
        categoryData[featuredKey] = featuredData;
      }

      // ‚úÖ 2. Charger premi√®re subcategory avec cl√© normalis√©e incluant subcategoryId
      final subcategoryData = await _loadCategorySubcategory(city, categoryId);
      if (subcategoryData.isNotEmpty) {
        categoryData.addAll(subcategoryData); // subcategoryData contient d√©j√† les bonnes cl√©s
      }

      print('‚úÖ Cat√©gorie $categoryId: ${categoryData.length} carousels charg√©s');
      return categoryData;

    } catch (e) {
      print('‚ùå Cat√©gorie $categoryId: Erreur $e');
      return {};
    }
  }

  Future<List<ExperienceItem>> _loadCategoryFeatured(City city, String categoryId) async {
    try {
      const String eventsCategoryId = 'c3b42899-fdc3-48f7-bd85-09be3381aba9';
      final isEvents = categoryId == eventsCategoryId;

      if (isEvents) {
        // ‚úÖ √âv√©nements Featured
        final events = await ref.read(getEventsUseCaseProvider).execute(
          latitude: city.lat,
          longitude: city.lon,
          sectionId: SectionIds.featured,
          categoryId: categoryId,
          limit: 8, // Preload optimis√©
        );

        return events.map((event) => ExperienceItem.event(event)).toList();
      } else {
        // ‚úÖ Activit√©s Featured
        final activities = await ref.read(getActivitiesUseCaseProvider).execute(
          latitude: city.lat,
          longitude: city.lon,
          sectionId: SectionIds.featured,
          categoryId: categoryId,
          limit: 8, // Preload optimis√©
        );

        return activities.map((activity) => ExperienceItem.activity(activity)).toList();
      }

    } catch (e) {
      print('‚ùå Featured $categoryId: Erreur $e');
      return [];
    }
  }

  Future<Map<String, List<ExperienceItem>>> _loadCategorySubcategory(City city, String categoryId) async {
    try {
      final Map<String, List<ExperienceItem>> subcategoryData = {};

      // ‚úÖ R√©cup√©rer les 3 premi√®res subcategories disponibles
      final subcategories = await ref.read(subCategoriesForCategoryProvider(categoryId).future);
      final subcategoriesToLoad = subcategories.take(3).toList();

      if (subcategoriesToLoad.isEmpty) {
        return subcategoryData;
      }

      // ‚úÖ Charger chaque subcategory avec cl√© unique
      for (final subcategory in subcategoriesToLoad) {
        final activities = await ref.read(getActivitiesUseCaseProvider).execute(
          latitude: city.lat,
          longitude: city.lon,
          sectionId: SectionIds.subcategory,
          categoryId: categoryId,
          subcategoryId: subcategory.id,
          limit: 5, // Preload optimis√©
        );

        if (activities.isNotEmpty) {
          // ‚úÖ Cl√© unique avec subcategoryId pour √©viter les √©crasements
          final subcategoryKey = '${categoryId}_${SectionIds.subcategory}_${subcategory.id}';
          subcategoryData[subcategoryKey] = activities.map((activity) => ExperienceItem.activity(activity)).toList();
        }
      }

      return subcategoryData;

    } catch (e) {
      print('‚ùå Subcategory $categoryId: Erreur $e');
      return {};
    }
  }
}
