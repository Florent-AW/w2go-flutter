// lib/core/common/utils/caching_image_provider.dart

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';

/// Provider unifi√© avec cl√©s de cache STABLES
/// √âvite les cache miss par bucketisation + cacheKey normalis√©e
class CachingImageProvider extends CachedNetworkImageProvider {
  CachingImageProvider._(String url, {int? maxWidth, String? cacheKey})
      : super(
    url,
    maxWidth: maxWidth,
    // ‚úÖ CRITIQUE : cacheKey stable pour √©viter miss sur query-strings
    cacheKey: cacheKey,
  );

  // ‚úÖ Cache singleton selon expert - M√äME INSTANCE partout
  static final Map<String, CachingImageProvider> _cache = {};

  /// ‚úÖ Bucketise largeur par multiples de 16 pour stabilit√© cache
  static int _bucketWidth(int pixels) => (pixels / 16).round() * 16;

  /// ‚úÖ Normalise URL (supprime ? final + espaces)
  static String _normalizeUrl(String url) {
    var u = url.trim();
    if (u.endsWith('?')) u = u.substring(0, u.length - 1);
    return u;
  }

  /// ‚úÖ G√©n√®re cacheKey stable sans query-strings volatiles
  static String _stableCacheKey(String url, {int? width}) {
    try {
      final uri = Uri.parse(url);
      // Path uniquement (sans query) pour stabilit√©
      final pathOnly = '${uri.scheme}://${uri.host}${uri.path}';
      return width != null ? '${pathOnly}|w=${width}' : pathOnly;
    } catch (e) {
      // Fallback si URL invalide
      return width != null ? '${url}|w=${width}' : url;
    }
  }

  /// Retourne EXACTEMENT la m√™me instance pour chaque URL+largeur bucketis√©e
  static CachingImageProvider of(String url, {int? maxWidth}) {
    if (url.isEmpty) {
      url = 'placeholder'; // URL placeholder pour √©viter erreurs
    }

    // ‚úÖ 1) Normaliser URL
    final normalizedUrl = _normalizeUrl(url);

    // ‚úÖ 2) Bucketiser largeur (stabilit√© cache)
    final bucketedWidth = _bucketWidth(maxWidth ?? 800);

    // ‚úÖ 3) Cl√© composite stable
    final cacheKey = '${normalizedUrl}_w${bucketedWidth}';

    // ‚úÖ 4) CacheKey stable pour disk cache
    final stableCacheKey = _stableCacheKey(normalizedUrl, width: bucketedWidth);

    return _cache.putIfAbsent(
      cacheKey,
          () => CachingImageProvider._(
        normalizedUrl,
        maxWidth: bucketedWidth, // ‚ùå PAS de maxHeight (instable)
        cacheKey: stableCacheKey, // ‚úÖ Stable disk cache key
      ),
    );
  }

  /// Helper : Calcule largeur bucketis√©e depuis une largeur logique
  static int bucketedWidthFromLogical(double logicalWidth, double devicePixelRatio) {
    final physicalWidth = (logicalWidth * devicePixelRatio).round();
    return _bucketWidth(physicalWidth.clamp(320, 1536));
  }

  /// Pr√©-cache une image avec dimensions bucketis√©es
  static Future<void> precache(
      String url,
      BuildContext context, {
        int? cacheWidth, // ‚ùå Pas de cacheHeight
      }) async {
    if (url.isEmpty) return;

    try {
      final bucketedWidth = _bucketWidth(cacheWidth ?? 800);
      final provider = of(url, maxWidth: bucketedWidth);
      await precacheImage(provider, context);

      debugPrint('‚úÖ PRECACHED: $url (bucket: ${bucketedWidth}px)');
    } catch (e) {
      debugPrint('‚ö†Ô∏è PRECACHE FAILED: $url - $e');
    }
  }

  /// Pr√©-cache multiple avec buckets coh√©rents
  static Future<void> precacheMultiple(
      List<String> urls,
      BuildContext context, {
        int? cacheWidth, // ‚ùå Pas de cacheHeight
        int maxConcurrent = 3,
      }) async {

    final bucketedWidth = _bucketWidth(cacheWidth ?? 800);
    debugPrint('üñºÔ∏è PRECACHING ${urls.length} images (bucket: ${bucketedWidth}px)');

    // Traitement par batch pour √©viter surcharge r√©seau
    for (int i = 0; i < urls.length; i += maxConcurrent) {
      final batch = urls.skip(i).take(maxConcurrent);
      await Future.wait(
        batch.map((url) => precache(
          url,
          context,
          cacheWidth: bucketedWidth, // ‚úÖ Bucket coh√©rent
        )),
      );
    }

    debugPrint('‚úÖ PRECACHING COMPLETED: ${urls.length} images');
  }

  /// Debug : Status cache pour une URL avec ImageConfiguration coh√©rente
  static Future<bool> isCachedInMemory(String url, int width, BuildContext context) async {
    try {
      final provider = of(url, maxWidth: _bucketWidth(width));
      // ‚úÖ CRITIQUE : M√™me ImageConfiguration que le rendu r√©el
      final key = await provider.obtainKey(
        ImageConfiguration(devicePixelRatio: MediaQuery.of(context).devicePixelRatio),
      );
      final status = PaintingBinding.instance.imageCache.statusForKey(key);
      return status != null;
    } catch (e) {
      return false;
    }
  }

  /// Nettoie le cache complet
  static void clearCache() {
    _cache.clear();
    PaintingBinding.instance.imageCache.clear();
  }

  /// Nettoie une URL sp√©cifique du cache
  static void clearUrl(String url) {
    final normalizedUrl = _normalizeUrl(url);
    _cache.removeWhere((key, value) => key.contains(normalizedUrl));
  }

  /// Debug : Stats du cache
  static Map<String, dynamic> getCacheStats() {
    return {
      'memoryProviders': _cache.length,
      'imageCache': PaintingBinding.instance.imageCache.currentSize,
      'imageCacheBytes': PaintingBinding.instance.imageCache.currentSizeBytes,
    };
  }

  /// Debug : Buckets actifs
  static List<int> getActiveBuckets() {
    return _cache.keys
        .map((k) => RegExp(r'_w(\d+)$').firstMatch(k)?.group(1))
        .where((w) => w != null)
        .map((w) => int.parse(w!))
        .toSet()
        .toList()
      ..sort();
  }
}