// lib/features/categories/application/state/subcategories_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/widgets.dart';
import 'dart:async';
import '../../../../core/domain/models/shared/subcategory_model.dart';
import '../../../../core/domain/ports/providers/search/subcategory_search_provider.dart';
import '../../../search/application/state/section_discovery_providers.dart';
import '../../../../core/domain/models/shared/city_model.dart';
import '../../../search/application/state/experience_providers.dart';

/// StateNotifier pour la sous-cat√©gorie actuellement s√©lectionn√©e
/// Permet de s√©lectionner automatiquement la premi√®re sous-cat√©gorie
class SelectedSubcategoryNotifier extends StateNotifier<Subcategory?> {
  SelectedSubcategoryNotifier() : super(null);

  void selectFirstForCategory(List<Subcategory> subcategories) {
    if (subcategories.isNotEmpty && state == null) {
      print('üîÑ S√©lection automatique de la premi√®re sous-cat√©gorie: ${subcategories.first.name}');
      state = subcategories.first;
    }
  }

  void selectSubcategory(Subcategory? subcategory) {
    print('üéØ S√©lection manuelle de sous-cat√©gorie: ${subcategory?.name ?? "Tous"}');
    state = subcategory;
  }

  void resetSelection() {
    print('üîÑ R√©initialisation de la s√©lection de sous-cat√©gorie');
    state = null;
  }
}

/// Provider pour la sous-cat√©gorie actuellement s√©lectionn√©e
/// Valeur null signifie "Tous" (aucun filtre)
final selectedSubCategoryProvider = StateNotifierProvider<SelectedSubcategoryNotifier, Subcategory?>((ref) {
  return SelectedSubcategoryNotifier();
});

/// Provider qui r√©cup√®re les sous-cat√©gories pour une cat√©gorie donn√©e
final subCategoriesForCategoryProvider = FutureProvider.family<List<Subcategory>, String>(
        (ref, categoryId) async {
      print('üîç Chargement des sous-cat√©gories pour la cat√©gorie: $categoryId');
      final subcategorySearchPort = ref.watch(subcategorySearchProvider);

      try {
        // 1. Charger les sous-cat√©gories
        final subcategories = await subcategorySearchPort.getSubcategoriesByCategory(categoryId);
        print('üìã Sous-cat√©gories trouv√©es: ${subcategories.length}');

        // 2. MODIFICATION: Pr√©charger les sections AVANT de s√©lectionner une sous-cat√©gorie
        if (subcategories.isNotEmpty) {
          print('üîÑ Pr√©chargement des sections...');
          // Attendre explicitement que les sections soient charg√©es
          final sectionsAsync = ref.read(subcategorySectionsProvider);
          final sections = await sectionsAsync.maybeWhen(
            data: (data) => data,
            orElse: () async {
              // Si les sections ne sont pas disponibles, les charger explicitement
              return await ref.read(subcategorySectionsProvider.future);
            },
          );
          // 3. Maintenant que les sections sont charg√©es, v√©rifier s'il faut s√©lectionner une sous-cat√©gorie
          print('üîÑ Tentative de s√©lection auto...');

          // V√©rifier d'abord si une sous-cat√©gorie est d√©j√† s√©lectionn√©e pour cette cat√©gorie
          final currentSelection = ref.read(selectedSubcategoryByCategoryProvider(categoryId));
          print('üîç S√©lection actuelle pour cat√©gorie $categoryId: ${currentSelection?.name ?? "null"}');

          // 4. S√©lectionner uniquement si aucune sous-cat√©gorie n'est actuellement s√©lectionn√©e
          if (currentSelection == null) {
            // IMPORTANT: Utiliser un d√©lai court pour √©viter les erreurs pendant le build
            WidgetsBinding.instance.addPostFrameCallback((_) {
              print('üéØ S√©lection de la premi√®re sous-cat√©gorie: ${subcategories.first.name}');
              // Utiliser le provider par cat√©gorie
              ref.read(selectedSubcategoryByCategoryProvider(categoryId).notifier).state = subcategories.first;
            });
          }
        }

        // Programmation du nettoyage apr√®s 60 secondes (TTL)
        final timer = Timer(const Duration(seconds: 60), () {
          // Invalider seulement si le provider est toujours en vie
          try {
            print('‚è∞ TTL expir√© pour les sous-cat√©gories de: $categoryId');
            ref.invalidateSelf();
          } catch (e) {
            print('‚ö†Ô∏è Provider d√©j√† d√©mont√© pour: $categoryId');
          }
        });

        // S'assurer que le timer est annul√© si le provider est dispos√© manuellement
        ref.onDispose(() {
          print('üßπ Nettoyage du timer pour les sous-cat√©gories de: $categoryId');
          timer.cancel();
        });

        // Garder en vie pendant l'utilisation active
        ref.keepAlive();

        return subcategories;
      } catch (e) {
        print('‚ùå Erreur lors du chargement des sous-cat√©gories: $e');
        return [];
      }
    }
);

/// Provider qui indique si l'option "Tous" est s√©lectionn√©e
final isAllSubCategoriesSelectedProvider = Provider<bool>((ref) {
  return ref.watch(selectedSubCategoryProvider) == null;
});

// Ajout: Provider pour stocker la sous-cat√©gorie s√©lectionn√©e par cat√©gorie
final selectedSubcategoryByCategoryProvider = StateProvider.family<Subcategory?, String>((ref, categoryId) => null);

/// Extension pour les analytics
extension SubCategoryAnalytics on Subcategory? {
  String get analyticsId => this == null ? 'all' : this!.id;
}

/// Provider qui filtre les sous-cat√©gories ayant du contenu
final subcategoriesWithContentProvider = FutureProvider.family<List<Subcategory>, ({String categoryId, City? city})>(
      (ref, params) async {
    final categoryId = params.categoryId;
    final city = params.city;

    if (city == null) return [];

    // 1. R√©cup√©rer toutes les sous-cat√©gories
    final allSubcategories = await ref.read(subCategoriesForCategoryProvider(categoryId).future);

    if (allSubcategories.isEmpty) return [];

    // 2. V√©rifier lesquelles ont du contenu en parall√®le
    final contentChecks = await Future.wait(
      allSubcategories.map((subcategory) async {
        try {
          final experiencesMap = await ref.read(subcategorySectionExperiencesProvider((
          categoryId: categoryId,
          subcategoryId: subcategory.id,
          city: city,
          )).future);

          // V√©rifier si au moins une section a du contenu
          final hasContent = experiencesMap.values.any((experiences) => experiences.isNotEmpty);
          return hasContent ? subcategory : null;
        } catch (e) {
          print('‚ùå Erreur v√©rification contenu pour ${subcategory.name}: $e');
          return null; // Masquer en cas d'erreur
        }
      }),
    );

    // 3. Filtrer les nulls
    final subcategoriesWithContent = contentChecks
        .where((subcategory) => subcategory != null)
        .cast<Subcategory>()
        .toList();

    print('‚úÖ Sous-cat√©gories avec contenu: ${subcategoriesWithContent.length}/${allSubcategories.length}');
    return subcategoriesWithContent;
  },
);