import 'dart:async';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../core/domain/models/shared/city_model.dart';
import '../../../../core/domain/models/shared/category_model.dart';
import '../../../../core/domain/models/shared/experience_item.dart';
import '../../../search/application/state/city_selection_state.dart';
import '../../../search/application/state/experience_providers.dart';
import '../../../categories/application/state/subcategories_provider.dart';
import '../../../search/application/state/section_discovery_providers.dart';
import '../../application/state/categories_provider.dart';

/// Controller pour g√©rer la compl√©tion des carrousels CategoryPage
class CategoryExperiencesController extends Notifier<void> {

  @override
  void build() {
    // Pas d'√©tat initial n√©cessaire
  }

  /// Compl√®te un carrousel Featured en rechargeant avec la limite Supabase compl√®te
  Future<void> completeFeaturedCarousel(String categoryId, String sectionId, City city) async {
    try {
      print('üîÑ COMPLETION FEATURED: D√©but pour cat√©gorie $categoryId, section $sectionId');

      // Invalider le provider Featured pour forcer le rechargement
      const String eventsCategoryId = 'c3b42899-fdc3-48f7-bd85-09be3381aba9';
      final isEventsCategory = categoryId == eventsCategoryId;

      if (isEventsCategory) {
        ref.invalidate(featuredEventsBySectionProvider((
        sectionId: sectionId,
        categoryId: categoryId,
        city: city,
        )));
      } else {
        ref.invalidate(featuredActivitiesBySectionProvider((
        sectionId: sectionId,
        categoryId: categoryId,
        city: city,
        )));
      }

      print('‚úÖ COMPLETION FEATURED: Carrousel Featured recharg√©');

    } catch (e) {
      print('‚ùå COMPLETION FEATURED: Erreur $e');
    }
  }

  /// Compl√®te un carrousel de sous-cat√©gorie en rechargeant avec la limite Supabase compl√®te
  Future<void> completeSubcategoryCarousel(String categoryId, String sectionId, City city) async {
    try {
      print('üîÑ COMPLETION SUBCATEGORY: D√©but pour cat√©gorie $categoryId, section $sectionId');

      // R√©cup√©rer la sous-cat√©gorie s√©lectionn√©e
      final selectedSubcategory = ref.read(selectedSubcategoryByCategoryProvider(categoryId));
      if (selectedSubcategory == null) {
        print('‚ùå COMPLETION SUBCATEGORY: Pas de sous-cat√©gorie s√©lectionn√©e');
        return;
      }

      // Invalider le provider Subcategory pour forcer le rechargement
      ref.invalidate(subcategorySectionExperiencesProvider((
      categoryId: categoryId,
      subcategoryId: selectedSubcategory.id,
      city: city,
      )));

      print('‚úÖ COMPLETION SUBCATEGORY: Carrousel Subcategory recharg√©');

    } catch (e) {
      print('‚ùå COMPLETION SUBCATEGORY: Erreur $e');
    }
  }

  /// M√©thode unifi√©e pour d√©terminer le type et compl√©ter
  Future<void> completeCarouselForCategory(String categoryId, String sectionId, City city, {bool isFeatured = false}) async {
    if (isFeatured) {
      await completeFeaturedCarousel(categoryId, sectionId, city);
    } else {
      await completeSubcategoryCarousel(categoryId, sectionId, city);
    }
  }
}

/// Provider pour le controller
final categoryExperiencesControllerProvider = NotifierProvider<CategoryExperiencesController, void>(
  CategoryExperiencesController.new,
);