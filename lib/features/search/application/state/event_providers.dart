// lib/features/search/application/state/event_providers.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../../../../core/domain/models/event/search/searchable_event.dart';
import '../../../../core/domain/models/search/config/section_metadata.dart';
import '../../../../core/domain/models/shared/city_model.dart';
import '../../../../core/adapters/supabase/search/event_search_adapter.dart';
import '../../../../core/domain/use_cases/search/get_events_use_case.dart';
import '../../../../core/domain/ports/providers/search/activity_distance_manager_providers.dart';
import 'section_discovery_providers.dart';

// D√©finir une cl√© composite pour les √©v√©nements
typedef EventKey = ({
String categoryId,
String? subcategoryId,
City? city,
});

// D√©finir une cl√© composite pour les √©v√©nements en vedette
typedef FeaturedEventsKey = ({
String categoryId,
City? city,
});

/// Provider pour l'adapter de recherche d'√©v√©nements
final eventSearchAdapterProvider = Provider<EventSearchAdapter>((ref) {
  final client = Supabase.instance.client;
  return EventSearchAdapter(client);
});


/// Provider pour le use case de r√©cup√©ration d'√©v√©nements
final getEventsUseCaseProvider = Provider<GetEventsUseCase>((ref) {
  final searchAdapter = ref.read(eventSearchAdapterProvider);
  return GetEventsUseCase(searchAdapter);
});

/// Provider pour les √©v√©nements mis en avant par cat√©gorie
/// Utilise le nouveau use case avec section_id
final featuredEventsByCategoryProvider = FutureProvider.family<List<SearchableEvent>, FeaturedEventsKey>(
      (ref, key) async {
    final categoryId = key.categoryId;
    final city = key.city;

    print('üîç Recherche des √©v√©nements mis en avant pour cat√©gorie: $categoryId (ville: ${city?.cityName})');

    final useCase = ref.read(getEventsUseCaseProvider);

    // Utiliser directement l'objet city
    if (city == null) return [];

    try {
      // Utiliser la section ID des √©v√©nements par cat√©gorie
      const String featuredSectionId = 'a62c6046-8814-456f-91ba-b65aa7e73137';

      // Ex√©cuter la recherche avec city.lat et city.lon
      final events = await useCase.execute(
        latitude: city.lat,
        longitude: city.lon,
        sectionId: featuredSectionId,
        categoryId: categoryId,
        limit: 20,
      );

      // Cache des distances
      if (events.isNotEmpty) {
        ref.read(activityDistancesProvider.notifier).cacheActivitiesDistances(
            events.map((event) => (
            id: event.base.id,
            lat: event.base.latitude,
            lon: event.base.longitude,
            )).toList()
        );
      }

      return events;
    } catch (e) {
      print('‚ùå Erreur lors du chargement des √©v√©nements mis en avant: $e');
      return [];
    }
  },
);

/// Provider optimis√© pour les √©v√©nements filtr√©s par sous-cat√©gorie
/// Utilise une cl√© composite pour un cache granulaire par (cat√©gorie, sous-cat√©gorie)
final subcategorySectionEventsProvider = FutureProvider.family<Map<String, List<SearchableEvent>>, EventKey>(
      (ref, key) async {
    final categoryId = key.categoryId;
    final subcategoryId = key.subcategoryId;
    final city = key.city;  // Utiliser city au lieu de cityId

    print('üîÑ Chargement des √©v√©nements pour (cat√©gorie: $categoryId, sous-cat√©gorie: $subcategoryId, ville: ${city?.cityName})');

    if (subcategoryId == null) return {};

    // Utiliser ref.read pour les d√©pendances non r√©actives
    final useCase = ref.read(getEventsUseCaseProvider);

    // Pas besoin de charger la ville, on l'a d√©j√†
    if (city == null) {
      print('‚ö†Ô∏è Ville non trouv√©e, impossible de charger les √©v√©nements');
      return {};
    }

    // R√©cup√©rer les sections et attendre explicitement leur chargement
    final sections = await ref.read(
      effectiveSubcategorySectionsProvider(categoryId).future,
    ).catchError((_) => <SectionMetadata>[]);

    if (sections.isEmpty) {
      print('‚ö†Ô∏è Aucune section de sous-cat√©gorie n\'a √©t√© trouv√©e');
      return {};
    }

    // Ajout de logs pour v√©rifier l'ordre avant tri
    print('üìã Avant tri: ${sections.map((s) => '${s.title} (priority:${s.priority})').join(' ‚Üí ')}');

    // Tri explicite par priorit√© (ascendant)
    sections.sort((a, b) => a.priority.compareTo(b.priority));

    // Logs apr√®s tri pour confirmation
    print('üîÄ Apr√®s tri: ${sections.map((s) => '${s.title} (priority:${s.priority})').join(' ‚Üí ')}');

    // Param√®tres pour la d√©duplication
    final int desiredLimit = 20; // Nombre d'√©v√©nements souhait√©s par section
    final int fetchSize = desiredLimit * 2; // Over-fetch: 2x le nombre souhait√©
    final Map<String, List<SearchableEvent>> result = {};
    final seenIds = <String>{}; // Set global pour la d√©duplication

    try {
      // Pour chaque section, r√©cup√©rer et d√©dupliquer les √©v√©nements
      for (final section in sections) {
        print('üîÑ Chargement de la section ${section.title} (${section.id})');
        final sectionKey = 'section-${section.id}';

        // 1. Over-fetch: r√©cup√©rer plus d'√©v√©nements que n√©cessaire
        final events = await useCase.execute(
          latitude: city.lat,
          longitude: city.lon,
          sectionId: section.id,
          subcategoryId: subcategoryId,
          categoryId: categoryId,
          limit: fetchSize, // R√©cup√©rer 2x plus d'√©v√©nements
        );

        // 2. D√©duplication: ne garder que les √©v√©nements non vus pr√©c√©demment
        final uniqueEvents = <SearchableEvent>[];
        for (final event in events) {
          if (seenIds.add(event.base.id)) { // Retourne true si l'ID n'√©tait pas d√©j√† dans le set
            uniqueEvents.add(event);
            if (uniqueEvents.length == desiredLimit) break;
          }
        }

        // 3. Tron√ßage et stockage
        final displayEvents = uniqueEvents.take(desiredLimit).toList();

        if (displayEvents.isNotEmpty) {
          result[sectionKey] = displayEvents;
          print('‚úÖ Section ${section.title}: ${displayEvents.length} √©v√©nements uniques (sur ${events.length} r√©cup√©r√©s)');
        } else {
          print('‚ö†Ô∏è Aucun √©v√©nement unique pour la section ${section.title}');
        }
      }

      // Cache des distances pour tous les √©v√©nements
      final allEvents = result.values.expand((list) => list).toList();
      if (allEvents.isNotEmpty) {
        ref.read(activityDistancesProvider.notifier).cacheActivitiesDistances(
            allEvents.map((event) => (
            id: event.base.id,
            lat: event.base.latitude,
            lon: event.base.longitude,
            )).toList()
        );
      }

      print('üìä CACHE: ${result.length} sections avec ${seenIds.length} √©v√©nements uniques au total');
      return result;
    } catch (e) {
      print('‚ùå Erreur lors du chargement des √©v√©nements par sous-cat√©gorie: $e');
      return {};
    }
  },
);